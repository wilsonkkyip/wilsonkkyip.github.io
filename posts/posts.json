[
  {
    "path": "posts/2023-07-29-rust-gapi-oauth2/",
    "title": "Google OAuth2 Implementation on Rust Reqwest",
    "description": "An implementation of Google OAuth2 procedures on Rust reqwest for Server-side Web Apps and Service Accounts.",
    "author": [
      {
        "name": "Wilson Yip",
        "url": {}
      }
    ],
    "date": "2023-07-29",
    "categories": [
      "rust",
      "oauth2",
      "google-oauth"
    ],
    "contents": "\n\nContents\nIntroduction\nOAuth2 Procedures\nCreate Google Cloud Project\nSelect Required Library\nCreate OAuth Client ID Secrets\nConfigure OAuth Consent Screen\nCreate OAuth Client ID for Users\n\nService Account\n\nRust Reqwest Implementation\nAuthorise Client Application (Client ID)\nAuthorise Client Application (Refresh Token)\nAuthorise Service Account\n\nExamples\n\n\n\n\nIntroduction\nIt comes to me on many occasions that Google APIs are required to complete my tasks. API keys may be an easy choice for those non-sensitive scopes (for example calling YouTube API for some public videos and channels). But when it comes to handling files in Google Drive, things become complicated as the service requires authentication and authorisation. This article aims to provide a solution on obtaining an authorised token to be put in http requests’ header for calling the Google APIs’ sensitive scopes in Rust environment.\nA Github repo was created for the purpose. It can be used in CLI environment and imported as rust crate as well. Below will first briefly describe the OAuth2 procedures, then walk through some important script, and finally will show some examples using of the crate.\nOAuth2 Procedures\nWhen I first encountered OAuth2, I was confused about what scopes and endpoints are because both scopes and endpoints are represented by url-like strings in Google APIs. In a nutshell, endpoints represent what services you want to use. For example there is a specific endpoint for reading the metadata of a file in Google Drive; there is another endpoint for you to update the file. On the other hand, scopes are the abilities of your authorised token. For example, is your token able to read the files from Google Drive? It depends on whether your token contains the specific scope.\nGoogle separates the authorisation method for server-to-server interactions and user-to-server interactions. We will use a service account for the prior situation and a client secret for the later one. Both can be represented by a JSON file. To obtain these JSON files, we first need to create a Google Cloud Project. Then within the project, we can create the secret JSON files.\n\n\n\n\n\n\nCreate Google Cloud Project\nGo to https://console.developers.google.com and click Select a project.\nClick New Project.\nEnter the Project name and click Create.\n\n\n\n\n\n\n\n\n\n\n\n\nSelect Required Library\nUnder APIs and service, click Library.\nSearch the API library(ies) you wish to use. In this example, we choose Google Drive API.\nClick the library you want.\nClick Enable.\n\n\n\n\n\n\n\n\n\n\n\n\nCreate OAuth Client ID Secrets\nNow we have created a project and picked the required libraries. This section will show how to obtain a client_secret of the application for users to authorise. In order to do so, we need to first configure an OAuth consent screen to inform users about the name of the application and which scopes will be used by the application when they do the authorisation. Then we will create the application secret (or client_secret) for this application.\nConfigure OAuth Consent Screen\nUnder APIs and services, Credentials, click Configure consent screen or OAuth consent screen.\nIf you are within an organisation, you can pick Internal or External as User Type. Otherwise, you can only pick External.\nFor internal apps, it is only available to users within the organisation. But the app is not required to have any privacy policy.\nFor external apps, you can add at most 100 test users for testing the application before published. But the refresh_token obtained from the authorisation and authentication process is only valid for 1 week only.\n\nEnter the App name and User support email.\nScroll down and enter the developer contact information and click Save and continue.\nClick Add or remove scopes.\nSelect the scopes you want to use.\nClick Save and continue.\n(For external apps only) Click Add users as test users for the application.\n(For external apps only) Enter the email address(es) for the test user(s). Then click Add.\nClick Save and continue.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate OAuth Client ID for Users\nUnder APIs and services, Credentials, click Create Credentials, then click OAuth client ID.\nSelect Web application as Application type and enter the name of the application.\nScroll down and enter the Authorised redirect URIs. Please put a slash (/) at the end of the uri. Then click Create.\nFinally click Download JSON.\n\n\n\n\n\n\n\n\n\n\n\n\nService Account\nThis section describe how to obtain a service account JSON. If you wish to handle users’ data, please follow this section.\nUnder APIs and services, Credentials, click Create Credentials, then click Service Account.\nInsert the name, account id, and description of the service account. Then click Done.\nClick the newly created service account email.\nClick Keys, then clickAdd key and Create new key.\nSelect JSON as key type and click Create to download the service account JSON.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRust Reqwest Implementation\nNow we have obtained the secret JSON (either a client_seceret or a service_account or both). Depends on which type of secret we have, the authorisation methods are different.\nAuthorise Client Application (Client ID)\nFor authorising a client application (see this figure), we need to\nBuild a url with the follow query parameters:\nclient_id (the identification of the client application)\nredirect_uri (those we specified in step 3 in this section, put 1 uri here only)\nscope (the scopes the application wants to use; space-delimited if more than one is used)\naccess_type (either online of offline. A refresh_token will be obtained in later step for acquiring updated access token without another consent from the users)\n\nYou can specified more parameters for different configuration. See more from here.\nSend a request to Google OAuth page using the above url. Google will also ask for user consent in this stage.\nGoogle returns an authorisation code to the redirect_uri we specified above.\nSend another request to Google with the authorisation code obtained from the last step to exchange an access_token (and refresh_token if specified in step 1).\nThis access_token can use used to access the authorised endpoints.\n\n\n\nFigure 1: Authorise client application\n\n\n\nAmong the JSON obtained from this section, we create the following struct for the key-value pairs.\n\n#[derive(Debug, Deserialize, Serialize)]\npub struct ClientSecret {\n    pub client_id: String,\n    pub project_id: String,\n    pub auth_uri: String,\n    pub token_uri: String,\n    pub auth_provider_x509_cert_url: String,\n    pub client_secret: String,\n    pub redirect_uris: Vec<String>\n}\n\nThen we implement a method to the above struct to build the url for step 1.\n\npub fn auth_url(&self, scope: &str) -> String {\n    let params: HashMap<_,_> = HashMap::from([\n        (\"response_type\", \"code\"),\n        (\"access_type\", \"offline\"), // set 'offline' to obtain 'refresh_token'\n        (\"prompt\", \"consent\"),\n        (\"client_id\", &self.client_id),\n        (\"redirect_uri\", &self.redirect_uris[0]),\n        (\"scope\", &scope),\n        (\"state\", &self.client_id)\n    ]);\n\n    let url = reqwest::Url::parse_with_params(\n        &self.auth_uri, params\n    ).expect(\"Failed to parse auth url.\").to_string();\n    \n    return url;\n}\n\nNow we need to print out the above url and set up a http server to listen from Google’s response with the authorisation code to finish step 3.\n\n#[derive(Debug, Deserialize, Serialize)]\npub struct AuthCode {\n    pub code: String,\n    pub scope: String\n}\n\npub fn auth_code(&self, scope: &str, port: u32) -> Result<AuthCode, std::io::Error> {\n    let auth_url: String = self.auth_url(scope);\n    println!(\"Please visit this URL to authorize this application: {}\", auth_url);\n\n    let listener: TcpListener = \n        TcpListener::bind(format!(\"localhost:{}\", port))\n            .expect(\"Failed to bind to port\");\n    \n    let (mut stream, _) = listener.accept().unwrap();\n    let mut buf = [0;2048];\n    stream.read(&mut buf).unwrap();\n\n    let buf_str: String = String::from_utf8_lossy(&buf[..]).to_string();\n    let buf_vec: Vec<&str> = buf_str\n        .split(\" \")\n        .collect::<Vec<&str>>();\n\n    let args: String = buf_vec[1].to_string();\n    let callback_url: Url = Url::parse(\n        (format!(\"http://localhost:{}\", port) + &args).as_str()\n    ).expect(\"Failed to parse callback URL\");\n    let query: HashMap<_,_> = callback_url.query_pairs().into_owned().collect();\n    let output = AuthCode {\n        code: query.get(\"code\").unwrap().to_string(),\n        scope: query.get(\"scope\").unwrap().to_string()\n    };\n    return Ok(output);\n}\n\nFor step 4, the following function will prepare a POST request to Google to exchange the authorisation code for the access_token (and refresh_token).\n\n#[derive(Debug, Deserialize, Serialize)]\npub struct ClientSecretTokenResponse {\n    pub access_token: String,\n    pub expires_in: i64,\n    pub refresh_token: String,\n    pub scope: String,\n    pub token_type: String\n}\n\npub async fn auth_token(&self, code: &str) -> Result<ClientSecretTokenResponse, reqwest::Error> {\n    let body: Value = serde_json::json!({\n        \"client_id\": self.client_id,\n        \"client_secret\": self.client_secret,\n        \"code\": code,\n        \"grant_type\": \"authorization_code\",\n        \"redirect_uri\": self.redirect_uris[0]\n    });\n\n    let response = reqwest::Client::new()\n        .post(self.token_uri.as_str())\n        .json(&body)\n        .send()\n        .await?;\n\n    let content: ClientSecretTokenResponse = response.json()\n        .await.expect(\"Failed to parse http response\");\n\n    return Ok(content);\n}\n\nAuthorise Client Application (Refresh Token)\nWhen we obtained the refresh_token from the above, we can further request a new access_token when the previous one is expired. To do do, we first define a struct and implement an auth function to it.\n\npub const OAUTH_TOKEN_URL: &str = \"https://oauth2.googleapis.com/token\";\n\n#[derive(Debug, Deserialize, Serialize)]\npub struct Token {\n    pub access_token: String,\n    pub expires_in: i64\n}\n\n#[derive(Debug, Deserialize, Serialize)]\npub struct UserSecret {\n    pub client_id: String,\n    pub client_secret: String,\n    pub refresh_token: String\n}\n\npub async fn auth(&self) -> Result<Token, reqwest::Error> {\n    // Prepare auth body\n    let mut body: Value = serde_json::to_value(&self)\n        .expect(\"Could not convert UserSecret to Value\");\n    body[\"grant_type\"] = Value::String(\"refresh_token\".to_string());\n\n    // Auth request\n    let response: reqwest::Response = reqwest::Client::new()\n        .post(OAUTH_TOKEN_URL)\n        .json(&body)\n        .send()\n        .await?;\n\n    // Parse response to output\n    let content: Token = response.json().await?;\n\n    return Ok(content)\n}\n\nAuthorise Service Account\nFor authorising a service account (see this figure), we need to\nPrepare a JWT token. The token is separated into 3 parts:\nHeader: consist of the algorithm name and the privated_key_id (from the secret JSON).\nClaim: consist of client_email, scope, aud, iat and exp.\nKey: the private_key from the secret JSON.\n\nUse the JWT token to exchange the access_token.\n\n\n\nFigure 2: Authorise service account\n\n\n\nBelow shows the implementation.\n\n#[derive(Debug, Deserialize, Serialize)]\npub struct ServiceSecret {\n    pub client_email: String,\n    pub private_key_id: String,\n    pub private_key: String\n}\n\npub async fn auth(&self, scope: &str) -> Result<Token, reqwest::Error> {\n    // Auth Service Account\n    // https://developers.google.com/identity/protocols/oauth2/service-account\n\n    // Prepare JWT claim\n    let claim: serde_json::Value = serde_json::json!({\n        \"iss\": self.client_email.to_string(),\n        \"scope\": scope.to_string(),\n        \"aud\": \"https://oauth2.googleapis.com/token\".to_string(),\n        \"iat\": chrono::offset::Utc::now().timestamp(),\n        \"exp\": chrono::offset::Utc::now().timestamp() + 3600\n    });\n\n    // Prepare JWT header\n    let header: Header = Header{\n        alg: Algorithm::RS256,\n        kid: Some(self.private_key_id.to_string()),\n        ..Default::default()\n    };\n\n    // Prepare JWT key\n    let key: EncodingKey = EncodingKey::from_rsa_pem(\n        &self.private_key\n            .to_string()\n            .replace(\"\\\\n\", \"\\n\").as_bytes()\n    ).expect(\"Cannot build `EncodingKey`.\");\n\n    // Generate JWT\n    let token: String = encode(\n        &header, &claim, &key\n    ).expect(\"Cannot encode `token`.\");\n\n    // Auth JWT\n    let response: Response = reqwest::Client::new()\n        .post(OAUTH_TOKEN_URL)\n        .json(&serde_json::json!({\n            \"grant_type\": \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n            \"assertion\": token\n        }))\n        .send()\n        .await?;\n    \n    // Prepare output\n    let content: Token = match response.status() {\n        StatusCode::OK => response.json().await.expect(\"Unable to parse HTTP response JSON.\"),\n        StatusCode::UNAUTHORIZED => {\n            println!(\"{}\", response.text().await.unwrap());\n            panic!(\"HTTP request failed: Unauthorized.\");\n        },\n        _ => {\n            println!(\"{}\", response.text().await.unwrap());\n            panic!(\"HTTP request failed.\");\n        }\n    };\n\n    return Ok(content);\n}\n\nExamples\nA main.rs was also written in the Github repo to provide accessibility from command prompt.\n\ncargo run \n\n# Usage: gapi-oauth <SERVICE> <JSON_PATH> [SCOPE] [PORT]\n# \n# SERVICE: `user`, `service`, or `consent`\n# JSON_PATH: The path to the JSON file containing the credentials.\n# SCOPE: Only required for `service` and `consent`\n# PORT: Only required for `consent`\n\n\ncargo run user /path/to/client_token.json\n\n# {\n#   \"access_token\": \"...\",\n#   \"expires_in\": 3599\n# }\n\n\ncargo run user /path/to/service_acc.json 'https://www.googleapis.com/auth/drive'\n\n# {\n#   \"access_token\": \"...\",\n#   \"expires_in\": 3599\n# }\n\n\ncargo run consent /path/to/client_secret.json 'https://www.googleapis.com/auth/drive' 8088\n\n# Please visit this URL to authorize this application: \n# https://accounts.google.com/o/oauth2/auth?client_id=&prompt=consent&...\n# \n# {\n#   \"access_token\": \"...\",\n#   \"refresh_token\": \"...\",\n#   \"scopes\": [\n#     \"https://www.googleapis.com/auth/drive\"\n#   ],\n#   \"expiry\": \"2023-07-30T17:51:13.123456Z\",\n#   \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n#   \"token_uri\": \"https://oauth2.googleapis.com/token\",\n#   \"client_id\": \"...\",\n#   \"client_secret\": \"...\"\n# }\n\nIt can also be used as crate. After constructing the UserSecret or ServiceSecret, simply use the corresponding auth method to return the access_token.\n\nuse crate::auth_users::UserSecret;\nuse crate::auth_service::ServiceSecret;\n\n#[tokio::test]\nasync fn test_auth_user() {\n    let client_id = std::env::var(\"USER_CLIENT_ID\")\n        .expect(\"No USER_CLIENT_ID in env var\")\n        .as_str().to_string();\n    let client_secret = std::env::var(\"USER_CLIENT_SECRET\")\n        .expect(\"No USER_CLIENT_SECRET in env var\")\n        .as_str().to_string();\n    let refresh_token = std::env::var(\"USER_REFRESH_TOKEN\")\n        .expect(\"No USER_REFRESH_TOKEN in env var\")\n\n    // Construct UserSecret\n    let client_token = UserSecret {\n        client_id: client_id,\n        client_secret: client_secret,\n        refresh_token: refresh_token,\n    };\n\n    // Auth to Token, will panic if failed.\n    let _token = client_token.auth().await\n        .expect(\"Unable to authenticate\");\n}\n\n#[tokio::test]\nasync fn test_auth_service() {\n    let client_email = std::env::var(\"SERVICE_CLIENT_EMAIL\")\n        .expect(\"No SERVICE_CLIENT_EMAIL in env var\")\n        .as_str().to_string();\n    let private_key = std::env::var(\"SERVICE_PRIVATE_KEY\")\n        .expect(\"No SERVICE_PRIVATE_KEY in env var\")\n        .as_str().to_string();\n    let private_key_id = std::env::var(\"SERVICE_PRIVATE_KEY_ID\")\n        .expect(\"No SERVICE_PRIVATE_KEY_ID in env var\")\n        .as_str().to_string();\n\n    let service_secret = ServiceSecret {\n        client_email: client_email,\n        private_key: private_key,\n        private_key_id: private_key_id,\n    };\n\n    let scopes: Vec<String> = vec![\n        \"https://www.googleapis.com/auth/drive\".to_string(),\n        \"https://www.googleapis.com/auth/youtube\".to_string()\n    ];\n\n    let scope = scopes.join(\" \");\n\n    let _token = service_secret.auth(&scope).await\n        .expect(\"Unable to authenticate\");\n}\n\n\n\n\n",
    "preview": "posts/2023-07-29-rust-gapi-oauth2/img/auth_client_id.png",
    "last_modified": "2023-08-03T10:18:00+00:00",
    "input_file": "rust-gapi-oauth2.knit.md"
  }
]
